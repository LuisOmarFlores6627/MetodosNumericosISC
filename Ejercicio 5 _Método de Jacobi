import java.text.DecimalFormat;

public class Main {
    public static void main(String[] args) {
        // Tamaño de la matriz (n x n)
        int n = 3; // Por ejemplo, una matriz 3x3

        // Matriz de coeficientes A (ingresada manualmente)
         int[][] A = {
            {2, -1, 0},
            {-1, 2, -1},
            {0, -1, 2}
        };

        // Vector de términos constantes b (ingresado manualmente)
        int[] b = {1, 0, -11}; 
        // Calcular solución utilizando el método de Jacobi
        double[] solucion = jacobi(A, b);

        // Mostrar resultado
        System.out.println("La solución aproximada del sistema de ecuaciones es:");
        DecimalFormat df = new DecimalFormat("#.####"); // Formato para limitar a 4 decimales
        for (int i = 0; i < n; i++) {
            System.out.println("x[" + i + "] = " + df.format(solucion[i]));
        }
    }

    public static double[] jacobi(double[][] A, double[] b) {
        int n = A.length;
        double[] x0 = new double[n];
        double[] xNuevo = new double[n];

        // Inicializar x0 con ceros
        for (int i = 0; i < n; i++) {
            x0[i] = 0.0;
        }

        // Realizar un número fijo de iteraciones (en este caso, 50)
        for (int k = 0; k < 50; k++) {
            // Calcular nuevo valor de x
            for (int i = 0; i < n; i++) {
                double suma = 0.0;
                for (int j = 0; j < n; j++) {
                    if (j != i) {
                        suma += A[i][j] * x0[j];
                    }
                }
                xNuevo[i] = (b[i] - suma) / A[i][i];
            }

            // Actualizar x0
            for (int i = 0; i < n; i++) {
                x0[i] = xNuevo[i];
            }
        }

        return x0;
    }
}

